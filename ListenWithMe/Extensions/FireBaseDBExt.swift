//
//  FireBaseDB.swift
//  ListenWithMe
//
//  Created by Nader Said on 26/08/2022.
//
 import Foundation
import FirebaseDatabase

extension FireBaseDB
{
    func setAvatar(avatarStr:String)
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(Helper.getCurrentUserID()).child(Constants.kAVATAR).setValue(avatarStr)
    }
    
    func observeProfile(changeHandler : @escaping (User)->())
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(Helper.getCurrentUserID())
            .observe(.value, with: { snapshot in
                if let dictionaryUser = snapshot.value as? NSDictionary
                {
                    changeHandler(User([snapshot.key: dictionaryUser]))
                }
            })
    }
    
    func searchUsersByEmail(email:String,completion : @escaping (User?)->())
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).queryOrdered(byChild: Constants.kEMAIL).queryEqual(toValue: email).observeSingleEvent(of: .value)
        {
            userSnapshot in
            
            if let dictionaryUser = userSnapshot.value as? NSDictionary
            {
                let user = User(dictionaryUser)

                user.userID != Helper.getCurrentUserID() ? completion(user) : completion(nil)
            }
            else
            {
                completion(nil)
            }
        }
    }
    
    func observeFriends(completion : @escaping ([User])->())
    {
        getUsersFromIDList(path: "\(Constants.kALLUSERS)/\(Helper.getCurrentUserID())/\(Constants.kFRIENDS)")
        {
            completion($0)
        }
    }
    
    func observeFriendRequests(completion : @escaping ([User])->())
    {
        getUsersFromIDList(path: "\(Constants.kALLUSERS)/\(Helper.getCurrentUserID())/\(Constants.kFRIENDREQUESTS)")
        {
            completion($0)
        }
    }
    private func getUsersFromIDList(path:String,completion : @escaping ([User])->())
    {
        FireBaseDB.sharedInstance.DBref.child(path)
            .observeSingleEvent(of: .value, with: {snapshot in
                if let dict = snapshot.value as? NSDictionary
                {
                    var users = [User]()
                    let dispatchGroup = DispatchGroup()
                    
                    for id in dict.allValues as? [String] ?? []
                    {
                        dispatchGroup.enter()
                        FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(id)
                            .observeSingleEvent(of: .value, with: {userSnapshot in
                                if let dictionaryUser = userSnapshot.value as? NSDictionary
                                {
                                    let user = User([userSnapshot.key:dictionaryUser])
                                    users.append(user)
                                    dispatchGroup.leave()
                                }
                            })
                    }
                   
                    dispatchGroup.notify(queue: DispatchQueue.main)
                    {
                        completion(users)
                    }
                }
            })
    }
    
    func setFriendRequest(friendID: String)
    {
        let newEntryRef = FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(friendID).child(Constants.kFRIENDREQUESTS).childByAutoId()
        newEntryRef.setValue(Helper.getCurrentUserID())
    }
    func setFriend(friendID: String)
    {
        let myNewEntryRef = FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(Helper.getCurrentUserID()).child(Constants.kFRIENDS).childByAutoId()
        let friendNewEntryRef = FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(friendID).child(Constants.kFRIENDS).childByAutoId()

        myNewEntryRef.setValue(friendID)
        friendNewEntryRef.setValue(Helper.getCurrentUserID())
        
        FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(Helper.getCurrentUserID()).child(Constants.kFRIENDREQUESTS).queryEqual(toValue: friendID).ref.removeValue()
    }
    
    func getRefOfAutoGeneratedKey(keyValue:String,path:String, completion: @escaping (DatabaseReference) -> ())
    {
       let ref = FireBaseDB.sharedInstance.DBref.child(path)
        ref.observeSingleEvent(of: .value)
        {snapshot in
            if let dict = snapshot.value as? Dictionary<String,String>
            {
                for (key,value) in dict
                {
                    if value == keyValue
                    {
                        completion(ref.child(key))
                        break
                    }
                }
            }
        }
    }
    
    func removeFriend(friendID: String)
    {
        //remove friend from my list
        getRefOfAutoGeneratedKey(keyValue: friendID, path: "\(Constants.kALLUSERS)/\(Helper.getCurrentUserID())/\(Constants.kFRIENDS)")
        {
            $0.removeValue()
        }
        
        //remove myself from my friend's list
        getRefOfAutoGeneratedKey(keyValue: Helper.getCurrentUserID(), path: "\(Constants.kALLUSERS)/\(friendID)/\(Constants.kFRIENDS)")
        {
            $0.removeValue()
        }
    }
    
    func removeFriendRequest(friendID: String)
    {
        //remove myself from my friend's request list
        getRefOfAutoGeneratedKey(keyValue: Helper.getCurrentUserID(), path: "\(Constants.kALLUSERS)/\(friendID)/\(Constants.kFRIENDREQUESTS)")
        {
            $0.removeValue()
        }
    }
    
    func addSongToUserCollection(songName:String,urlStr :String)
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(Helper.getCurrentUserID()).child(Constants.kSONGSCOLLECTION).child(songName).setValue(urlStr)
    }
    
    func observeSyncState(roomID:String,changeHandler : @escaping (SyncState)->() )
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kSYNCSTATE)
            .observe(.value)
        { syncedSnapshot in
            if let syncState = syncedSnapshot.value as? Int
            {
                changeHandler(SyncState(rawValue: syncState) ?? .notSynced)
            }
        }
    }
    
    func observePreparingToPlayState(roomID:String,changeHandler : @escaping (Bool)->() )
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kPREPARINGTOPLAYSTATE)
            .observe(.value)
        { preparingSnapshot in
            if let isPreparing = preparingSnapshot.value as? Bool
            {
                changeHandler(isPreparing)
            }
        }
    }
    
    func setSyncState(roomID:String,state:SyncState)
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kSYNCSTATE).setValue(state.rawValue)
    }
    
    func setPreparingToPlayState(roomID:String,isPreparing:Bool)
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kPREPARINGTOPLAYSTATE).setValue(isPreparing)
    }
    
    func setNowPlaying(roomID:String,userID:String, dict:NSDictionary)
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kNOWPLAYING).child(userID).setValue(dict)
    }
    func resetNowPlaying(roomID:String)
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kNOWPLAYING).removeValue()
        
    }
    func observeNowPlaying(roomID:String,friendID:String,changeHandler : @escaping (String,String,String,TimeInterval,TimeInterval)->() )
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kNOWPLAYING)
            .child(friendID).observe(.value)
        { nowPlayingSnapshot in
            if let nowPlayingDict = nowPlayingSnapshot.value as? NSDictionary, let songName = nowPlayingDict.allKeys.first as? String
            {
                if let songDict = nowPlayingDict[songName] as? NSDictionary
                {
                    let url = songDict["url"] as? String ?? ""
                    let singer = songDict["singer"] as? String ?? ""
                    let duration = songDict["duration"] as? TimeInterval ?? 0
                    let startTime = songDict["startTime"] as? TimeInterval ?? 0
                    changeHandler(songName,singer,url,startTime,duration)
                }
                
                
            }
        }
    }
    
    func songExists(songName:String,completion: @escaping (Bool,String)->())
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kALLUSERS).child(Helper.getCurrentUserID()).child(Constants.kSONGSCOLLECTION).child(songName).observeSingleEvent(of: .value)
        { DataSnapshot in
            completion(DataSnapshot.exists(), DataSnapshot.value as? String ?? "")
        }
    }
    
    func observeNowPlayingRemoved(roomID:String,changeHandler : @escaping ()->() )
    {
        FireBaseDB.sharedInstance.DBref.child(Constants.kROOMS).child(roomID).child(Constants.kNOWPLAYING)
            .observe(.childRemoved)
        { _ in
            changeHandler()
        }
    }
}
